name: IAC

on:
    push:
        branches: [ "main" ]
        paths: ["terraform/**"]
    pull_request:
    workflow_dispatch:
        inputs:
            action:
                description: 'Apply or Destroy'
                required: true
                default: 'apply'
                type: choice
                options:
                - apply
                - destroy
env:
    # credentials for deployment to AWS
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # S3 bucket for the terraform state. 
    BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
    EKS_CLUSTER: quiz-eks
    AWS_REGION: eu-west-3

jobs:
    terraform:
        name: "Apply terraform code changes"
        runs-on: ubuntu-latest
        environment: production
        defaults:
            run:
                shell: bash
                working-directory: ./terraform
        steps:
        - name: Checkout source code 
          uses: actions/checkout@v4

        - name: Setup Terraform with specified version on the runner
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          id: init
          run: terraform init -backend-config "bucket=$BUCKET_TF_STATE"

        - name: Terraform Format
          id: fmt
          run: terraform fmt -check
          continue-on-error: true 

        - name: Terraform Validate
          id: validate
          run: terraform validate

        - name: Terraform Plan
          id: plan
          run: terraform plan -no-color -input=false -out planfile
          continue-on-error: true 

        - name: Terraform Plan Status 
          if: steps.plan.outcome == 'failure'
          run: exit 1

        - name: Terraform Action
          id: apply_destroy
          run: |
            if [ "${{ github.event.inputs.action }}" == "apply" ]; then
              terraform apply -auto-approve -input=false -parallelism=1 planfile
            elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
              terraform destroy -auto-approve -input=false -parallelism=1
            else
              echo "Invalid action specified."
              exit 1
            fi

        - name: Configure AWS Credential
          uses: aws-actions/configure-aws-credentials@v4
          with:
              aws-region: ${{ env.AWS_REGION}}
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              role-session-name: GitHubActions
              role-duration-seconds: 3600

        - name: Get kube config file 
          id: getconfig
          if: steps.apply_destroy.outcome == 'success'
          run: |
            if [ "${{ github.event.inputs.action }}" == "apply" ]; then 
                echo "Update kubeconfig"
                aws eks update-kubeconfig --region ${{ env.AWS_REGION}} --name ${{ env.EKS_CLUSTER}}
            elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
                echo "Skipping aws eks update-kubeconfig after destroying the infrastructure."
            else
                echo "Invalid action specified."
                exit 1
            fi
        
        # - name: Print Kubeconfig
        #   id: printkubeconfig
        #   if: steps.apply_destroy.outcome == 'success'
        #   run: cat $(pwd)/kubeconfig
    
        # - name: Install or Remove Ingress Controller
        #   if: steps.apply_destroy.outcome == 'success' && steps.getconfig.outcome == 'success'
        #   run: |
        #     export KUBECONFIG=$(pwd)/kubeconfig
        #     if [ "${{ github.event.inputs.action }}" == "apply" ]; then
        #         kubectl apply --validate=false -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
        #     elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
        #         echo "Skipping Ingress Controller installation after destroying the infrastructure."
        #     else
        #         echo "Invalid action specified."
        #         exit 1
        #     fi




        